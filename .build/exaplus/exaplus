#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use POSIX qw/uname/;
use POSIX qw/strftime/;
use File::Basename;

#
# prototypes
#

sub check_display ($);
sub check_java_version ($$);
sub get_available_ram ($);
sub get_command ($$$);
sub get_java_version ();
sub get_java_properties($$);
sub get_ram_from_config_or_default ($);
sub is_64bit_java ($);
sub is_64bit_java_by_version ($);
sub is_64bit_java_by_path ($);
sub is_gui ();
sub is_interactive ();
sub main ();
sub max ($$);
sub min ($$);
sub numeric ($);
sub set_env ($);
sub system_ram ();
sub system_ram_AIX ();
sub system_ram_Darwin ();
sub system_ram_FreeBSD ();
sub system_ram_HPUX ();
sub system_ram_Linux ();
sub system_ram_Solaris ();

#
# constants
#

my $REQUIRED_VERSION = "1.6.0";
my $REQUIRED_VERSION_GUI = "1.6.0_17";
# HP's JRE has it's own version system;
# 1.6.0.06 contains Oracle's update 6u17.
my $REQUIRED_VERSION_GUI_HPUX = "1.6.0.06";
# IBM's JVM has it's own version system;
# not clear whether it contains Oracle's update 6u17.
my $REQUIRED_VERSION_GUI_IBM = "1.6.0";
my $REQUIRED_VERSION_GUI_OPENJDK = "1.6.0";

my $MEM_EXAPLUS_MIN = 128;
my $MEM_EXAPLUS_DEFAULT = 512;
my $MEM_EXAPLUS_MAX = 16 * 1024;
my $MEM_JRE32_MAX = 2 * 1024;
my $MEM_MAX = 2 * $MEM_EXAPLUS_MAX;
my $JAVA_PROPERTIES_DEFAULT = "-Xmx512m";

my $uname = (uname())[0];

my $prg = $FindBin::Script;
$prg = $prg . "gui" if is_gui();

#
# subroutines
#

sub main() {
    my $is_gui = is_gui();
    my $is_interactive = is_interactive();
    set_env($is_gui);

    my $version = get_java_version();
    my $is_64bit = is_64bit_java($version);

    check_display($is_gui) or exit 2;
    check_java_version($version, $is_gui) or exit 1;
    my @mem = get_java_properties($is_64bit, $is_gui);
    
    # if -g
    if ($is_gui) {
        my $home = $ENV{HOME};
        my $curr_time = strftime "%Y-%m-%d_%H:%M:%S", localtime(time);
        my $log_file = "$home/.exasol/jvm_error_" . $curr_time;

        my @test_command = ("java");
        push @test_command, ("-Djava.net.preferIPv4Stack=true");
        push @test_command, @mem;
        push @test_command, ("-cp","$FindBin::RealBin/exaplus.jar com.exasol.exaplus.JavaPropertiesTest");
        `@test_command`;

        my $signal = $? & 0xff;
        my $exit_code = ($? >> 8) & 0xff;

        if ($exit_code != 1) {
            unlink $log_file;
            my @comm = get_command(\@mem, $is_gui, $is_interactive);
            exec @comm or die;
        } else {
            @mem = ($JAVA_PROPERTIES_DEFAULT, "-Dcom.exasol.invalidDefaults=$log_file");
            my @comm = get_command(\@mem, $is_gui, $is_interactive);
            exec @comm or die;
        }
    } else { #if not gui
        exec get_command(\@mem, $is_gui, $is_interactive) or exec get_command({$JAVA_PROPERTIES_DEFAULT}, $is_gui, $is_interactive) or die; 
    } 
}

sub is_gui() {
    foreach my $arg (@ARGV) {
        return 1 if $arg eq "-g";
    }
    return 0;
}

sub is_interactive () {
    return -t STDIN && -t STDOUT;
}

sub get_java_version () {
    return `java -version 2>&1`;
}

sub set_env ($) {
    my $is_gui = shift;
    if ($uname eq "AIX") {
        $ENV{PATH} = "$ENV{PATH}:/usr/java6_64/bin:/usr/java6/bin";
    } elsif ($uname eq "HP-UX") {
        $ENV{PATH} = "$ENV{PATH}:/opt/java6/bin/IA64W:/opt/java6/bin/IA64N";
    } elsif ($uname eq "Darwin") {
        $ENV{PATH} = "/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin:$ENV{PATH}";
    }

    if ($is_gui) {
        $ENV{NO_AWT_MITSHM} = "true";
    }
}

sub check_display ($) {
    my $is_gui = shift;
    if ($uname eq "Darwin") {
        return 1;
    }
    if ($is_gui and not $ENV{DISPLAY}) {
        print STDERR "$prg: ERROR: Can not open display: DISPLAY variable is not set\n";
        print STDERR "$prg:        Use exaplus instead of exaplusgui for console mode\n";
        return 0;
    }
    return 1;
}

sub is_64bit_java ($) {
    my $version = shift;
    my $path = `which java`;
    return (is_64bit_java_by_version($version) or is_64bit_java_by_path($path));
}

sub is_64bit_java_by_version ($) {
    my $version = shift;
    return 1 if $version =~ /64-Bit|amd64-64|x86_64|ppc64-64/;
    return 0;
}

sub is_64bit_java_by_path ($) {
    my $path = shift;
    my $result = 0;

    my $fd;
    open($fd, $path);
    my $magic;
    if ($uname =~ /AIX/) {
        # XCOFF
        read($fd, $magic, 2);
        $result = ($magic eq chr(0x1).chr(0xf7));
    } elsif ($uname =~ /Darwin/) {
        # MACH-0 64bit or universal archive
        read($fd, $magic, 4);
        $result = ($magic eq chr(0xcf).chr(0xfa).chr(0xed).chr(0xfe) or
                   $magic eq chr(0xca).chr(0xfe).chr(0xba).chr(0xbe));
    } else {
        # ELF
        read($fd, $magic, 5);
        $result = ($magic eq chr(0x7f).'ELF'.chr(0x2));
    }
    close($fd);
    return $result;
}

sub check_java_version ($$) {
    my $version_txt = shift; 
    my $is_gui = shift;
    if (!defined $version_txt) {
        print STDERR "$prg: ERROR: Can not execute java\n";
        print STDERR "$prg:        No java in PATH?\n";
        return 0;
    }

    my $expected = $REQUIRED_VERSION;
    if ($is_gui) {
        if ($uname eq "HP-UX") {
            $expected = $REQUIRED_VERSION_GUI_HPUX;
        } elsif ($uname eq "AIX" or $version_txt =~ / IBM /) {
            $expected = $REQUIRED_VERSION_GUI_IBM;
        } elsif ($version_txt =~ /OpenJDK /) { 
            $expected = $REQUIRED_VERSION_GUI_OPENJDK;
        } else {
            $expected = $REQUIRED_VERSION_GUI;
        }
    }
    $version_txt =~ /.*^(java|openjdk) version *"(.*)".*/m;
    my $version = $2;
    if (numeric($version) < numeric($expected)) {
        if ($is_gui) {
            print STDERR "$prg: ERROR: EXAplus with GUI needs Java $expected or newer\n";
        } else {
            print STDERR "$prg: ERROR: EXAplus without GUI needs Java $expected or newer\n";
        }
        print STDERR "$prg:        The currently used Java is:\n";
        my $path = `which java`;
        chomp $path;
        print STDERR "$prg:        $path, version: $version\n";
        return 0;
    }
    return 1;
}

sub numeric ($) {
    $_ = shift;
    my $micro = 0;
    /(\d+)\.(\d+)\.(\d+)(?:[_.](\d+))?/;
    if (defined $4) {
        $micro = $4;
    }
    return $1 * 1000000 + $2 * 10000 + $3 * 100 + $micro;
}

sub min ($$) {
    my $x = shift;
    my $y = shift;
    return ($x < $y) ? $x : $y;
}

sub max ($$) {
    my $x = shift;
    my $y = shift;
    return ($x > $y) ? $x : $y;
}


sub system_ram_AIX () {
    return $MEM_MAX;
}

sub system_ram_Darwin () {
    return $MEM_MAX;
}

sub system_ram_FreeBSD () {
    my $pagesize = `sysctl -n vm.stats.vm.v_page_size 2>/dev/null`;
    my $pagecount = `sysctl -n vm.stats.vm.v_page_count 2>/dev/null`;
    my $mem = int($pagecount * $pagesize / 1024 / 1024);
    return $mem ? $mem : $MEM_MAX;
}

sub system_ram_HPUX () {
    return $MEM_MAX;
}

sub system_ram_Linux () {
    my $mem = $MEM_MAX;
    open(PROC, '/proc/meminfo') or return $mem;
    while (<PROC>) {
        $mem = int($1 / 1024) if (/^MemTotal:\s+(\d+)\s+kB$/)
    }
    close(PROC);
    return $mem;
}

sub system_ram_Solaris () {
    return $MEM_MAX;
}

sub system_ram () {
    if ($uname eq 'AIX') {
        return system_ram_AIX();
    } elsif ($uname eq 'Darwin') {
        return system_ram_Darwin();
    } elsif ($uname eq 'HP-UX') {
        return system_ram_HPUX();
    } elsif ($uname eq 'FreeBSD') {
        return system_ram_FreeBSD();
    } elsif ($uname eq 'Linux') {
        return system_ram_Linux();
    } elsif ($uname eq 'Solaris') {
        return system_ram_Solaris();
    } else {
        return $MEM_MAX;
    }
}

sub get_available_ram ($) {
    my $is_64bit = shift;
    my $available_ram = system_ram();
    if (not $is_64bit) {
        $available_ram = min($available_ram, $MEM_JRE32_MAX);
    }
    return min(int($available_ram * 0.8), $MEM_EXAPLUS_MAX);
}

sub get_ram_from_config_or_default ($) {
    my $is_gui = shift;
    my $mem = $MEM_EXAPLUS_DEFAULT;
    if (not $is_gui) {
        return $mem;
    }
    my $home = $ENV{'HOME'};
    my $config = "$home/.exasol/exaplus.cfg";
    $config = "$home/exasol/exaplus.cfg" if $uname ne 'Linux';
    if (-e $config) {
        open(CFG, $config) or return $mem;
        while (<CFG>) {
            if ($_ =~ /^MAX_MEMORY_USAGE=(\d+)$/) {
                $mem = $1;
                close(CFG);
                return $mem;
            }
        }
        close(CFG);
    }
    return $mem;
}

sub get_java_properties ($$) {
    my $is_64bit = shift;
    my $is_gui = shift;
    my $home = $ENV{HOME};
    my $config = "$home/.exasol/exaplus.cfg";

    my @mem = ($JAVA_PROPERTIES_DEFAULT);
    if (-e $config) {
        open(CFG, "<", $config);
        my @lines=<CFG>;
        foreach (@lines) {
            if ($_ =~ /^MAX_MEMORY_USAGE=(\d+)$/) {
                my $memValue = $1;
                $memValue = max($memValue, $MEM_EXAPLUS_MIN);
                $memValue = min($memValue, get_available_ram($is_64bit));
                @mem = ("-Xmx". $memValue . "m");
                return @mem;
            }
        }
        @mem = ();
        foreach (@lines) {
            s/[\r\n]+$//; s/^\s+|\s+$//g;
            push @mem, $_ unless /^($|#.*)/;
        }
    }

    return @mem;
}

sub get_command ($$$) {
    my $mem = shift;
    my $is_gui = shift;
    my $is_interactive = shift;

    my @cmd = ("java");
    if ($ENV{SQLPATH}) {
        push @cmd, "-DSQLPATH=$ENV{SQLPATH}";
    }
    push @cmd, ("-Djava.net.preferIPv4Stack=true");
    push @cmd, @$mem;
    if (not $is_gui) {
        push @cmd, ("-Djava.awt.headless=true");
    }
    push @cmd, ("-jar", "$FindBin::RealBin/exaplus.jar");
    if (not $is_gui and $is_interactive) {
        push @cmd, ("-interactive");
    }
    push @cmd, @ARGV;
    return @cmd;
}

if (basename($0) eq basename(__FILE__)) {
    main();
}
1;

# vim: ts=4:sts=4:sw=4:et:ft=perl:fdm=indent
